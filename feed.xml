<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://redforest0607.github.io/</id><title>RedForest</title><subtitle>개발자 꿈나무 장인규 입니다. 현재 인천대학교 컴퓨터 공학부에 재학중이며, 웹과 어플리케이션 서비스 개발에 큰 관심을 가지고 있습니다.</subtitle> <updated>2024-04-01T13:14:45+09:00</updated> <author> <name>In Gyu Jang</name> <uri>https://redforest0607.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://redforest0607.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://redforest0607.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator> <rights> © 2024 In Gyu Jang </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[AWS]OCI와 AWS의 차이</title><link href="https://redforest0607.github.io/posts/OCI%EC%99%80-AWS%EC%9D%98-%EC%B0%A8%EC%9D%B4/" rel="alternate" type="text/html" title="[AWS]OCI와 AWS의 차이" /><published>2024-03-28T16:53:00+09:00</published> <updated>2024-04-01T13:14:10+09:00</updated> <id>https://redforest0607.github.io/posts/OCI%EC%99%80-AWS%EC%9D%98-%EC%B0%A8%EC%9D%B4/</id> <content src="https://redforest0607.github.io/posts/OCI%EC%99%80-AWS%EC%9D%98-%EC%B0%A8%EC%9D%B4/" /> <author> <name>InGyuJang</name> </author> <category term="Tech" /> <category term="DevOps" /> <summary> 📌 아니이거왜같은이름달고서하는짓이달라요? 회사에서는 주로 Oracle Cloud를 통해서 프로젝트를 진행하고 있었고, 회사에 쌓여있는 클라우드에 대한 지식도 오라클에 촛점이 맞춰져 있었다. 사실 클라우드 도입이 오래 된 것이 아니기 때문에, 팀 전체가 새로운 클라우드 프로바이더를 만날 때 마다 공부하는 방식으로 프로젝트를 진행하고 있었다. OCI는 안그러던데…? NCloud와 AWS를 쓰면서 상사에게 들었던 말이었다. 당시 상황을 보여주자면 다음과 같이 한 로드밸런서에 두개의 인스턴스가 붙어있는 상태였다. 이 상황에서 만약 한 인스턴스의 WAS가 모종의 이유로 ( 오류나 배포)인해서 내려가게 되는데 7레이어에 해당하는 보통의 ALB들은 Health Check를 하기 직전까지 이런 WAS... </summary> </entry> <entry><title>[AWS]AWS SAA 공부 - EC2</title><link href="https://redforest0607.github.io/posts/AWS-%EA%B3%B5%EB%B6%80-1/" rel="alternate" type="text/html" title="[AWS]AWS SAA 공부 - EC2" /><published>2023-07-19T23:37:00+09:00</published> <updated>2024-04-01T13:14:10+09:00</updated> <id>https://redforest0607.github.io/posts/AWS-%EA%B3%B5%EB%B6%80-1/</id> <content src="https://redforest0607.github.io/posts/AWS-%EA%B3%B5%EB%B6%80-1/" /> <author> <name>InGyuJang</name> </author> <category term="Tech" /> <category term="DevOps" /> <summary> 📌 AWS SAA 자격증을 위한 중간 정리 - EC2 📎 AWS EC2에 대해서… Amazon Elastic Compute Cloud (이하 EC2)는 프로세스부터 OS까지 사용자가 직접 취사선택하여 생성할 수 있는 클라우드 인스턴스이다. 이후에 나오는 AWS의 다양한 서비스의 근간이 되는 서비스 이며, 서비스의 형태에 맞춰 특화된 다른 서비스와는 다르게 EC2는 어떤 서비스에도 대응할 수 있는, 기본중의 기본이다. EC2의 인스턴스 유형 EC2는 다양한 형식의 인스턴스를 지원하며 인스턴스의 첫 알파벳에서 어떤 인스턴스인지 알 수 있다. 범용적인, 균형있는 컴퓨팅을 위한 M, T 고성능 프로세서를 사용하는 C 대규모 데이터 세트를 처리하기 위한 메모리가 최적화 된 R, X - 엘라스... </summary> </entry> <entry><title>[Kotlin] 코틀린은 빌더 패턴을 필요로 할까?</title><link href="https://redforest0607.github.io/posts/does-kotlin-need-builder-pattern/" rel="alternate" type="text/html" title="[Kotlin] 코틀린은 빌더 패턴을 필요로 할까?" /><published>2023-03-28T13:50:20+09:00</published> <updated>2023-03-30T15:36:58+09:00</updated> <id>https://redforest0607.github.io/posts/does-kotlin-need-builder-pattern/</id> <content src="https://redforest0607.github.io/posts/does-kotlin-need-builder-pattern/" /> <author> <name>InGyuJang</name> </author> <category term="ProgrammingLanguage" /> <category term="Kotlin" /> <summary> 엥 빌더 패턴? 디자인 패턴을 공부해 봤다면, 빌더패턴에 대해서 알고 있을 것이다. 그래도 홍옥 시나 알쏭달쏭할만한 분들을 위해서 간략하게 설명을 하자면.. 클래스 { 빌더 { 클래스 리턴하는 메서드 build() } } 다음과 같은 구조로 클래스 내부의 클래스 프로퍼티들을 받아 클래스를 리턴하는 빌더를 생성하여서, 그 빌더를 통해서 클래스를 생성하는 방법이다. 클래스 내부에 필수적인 프로퍼티와 Nullable한 프로퍼티들을 구분하여 사용할 수 있으며, 만약 새로운 Nullable한 프로퍼티가 생기더라도, 중간의 빌더 패턴을 한번 통해주면, 디폴트 값을 넣어주면서 모든 코드를 수정하지 않아도 되는 장점이 있다. public class Student { private final... </summary> </entry> <entry><title>[Dart]Dart에서 Getter와 Setter</title><link href="https://redforest0607.github.io/posts/dart-getter-setter/" rel="alternate" type="text/html" title="[Dart]Dart에서 Getter와 Setter" /><published>2023-03-08T10:20:00+09:00</published> <updated>2023-04-06T14:37:49+09:00</updated> <id>https://redforest0607.github.io/posts/dart-getter-setter/</id> <content src="https://redforest0607.github.io/posts/dart-getter-setter/" /> <author> <name>InGyuJang</name> </author> <category term="Tech" /> <category term="Infrastructure" /> <summary> 📌 Dart에서 Getter와 Setter 여느때와 같이 Peach-Tri에서 스터디를 진행중이었다. 진행 도중에 riverpod 예시코드들에 getter setter 세팅이 전혀 없다는 점을 팀원이 이상하게 느꼈고, 그걸 기점으로 Dart라는 언어의 지향점이 어딘지에 대해서 의문을 품게 되었다. 너무나도 당연하게 Java스타일로 Getter Setter를 정해놓던 우리는 코드 작성 시간보다 디자인 패턴 파악에 긴 시간을 쏟은 결과, Dart의 도큐먼트와 몇몇 글들을 알게 되었고, 시작은 Dart지만 아마 이 내용은 전반적인 프로그래밍 언어의 흐름에 대해서 일 수도 있을 것 같다. 📎 Getter? Setter? ☕ In Java Java에서 Getter와 Setter는 필수적이다. Lombo... </summary> </entry> <entry><title>[Server]분산 모놀리식 VS MSA</title><link href="https://redforest0607.github.io/posts/dist-mono-vs-msa/" rel="alternate" type="text/html" title="[Server]분산 모놀리식 VS MSA" /><published>2023-03-08T10:20:00+09:00</published> <updated>2023-03-30T15:36:58+09:00</updated> <id>https://redforest0607.github.io/posts/dist-mono-vs-msa/</id> <content src="https://redforest0607.github.io/posts/dist-mono-vs-msa/" /> <author> <name>InGyuJang</name> </author> <category term="Tech" /> <category term="Infrastructure" /> <summary> 📌 분산 모놀리식 VS MSA 가장 최근의 인프라스트럭처에서 가장 핫한 이슈라고 한다면 단연코 Micro Service라고 말할 수 있다. Micro Service Architecture(이하 MSA)는 커다란 하나의 Monolithic구성이었던 서버 시스템을 각각의 서비스 단위로 찢어두면서, 분리된 서비스들을 각자 유지보수하거나, Scale-Out하는 방식으로 Scalability를 끌어올려주는 방식이다. 시스템이 단일로 존재하는 것이 아니다보&amp;gt;니, 배포할 때에도 각 서비스 단위로 배포가 가능하며, 리소스들을 각자 가지고 있기 때문에 장애에 대응하기에도 좀 더 적절한 방식이라고 볼 수 있다. 📎 분산 모놀리식은 무엇일까? 분산 모놀리식(Distributed Monolithic)방식은 M... </summary> </entry> </feed>
